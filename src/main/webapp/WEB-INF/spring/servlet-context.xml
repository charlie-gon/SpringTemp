<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 얘는 정적 컨텐츠 관련 작업 수행(css, img js..) -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3" />
	</beans:bean>
	
	<beans:bean
	class="org.springframework.web.servlet.view.UrlBasedViewResolver"
	p:order="2"
	p:viewClass="org.springframework.web.servlet.view.tiles3.TilesView" />
	<!--Don't add suffix or prefix like you do with .jsp files -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:value>/WEB-INF/tiles.xml</beans:value>
		</beans:property>
	</beans:bean>
	
	<!-- 아래 context:component-scan은 @Component, @Controller, @Service, @Repository를 스캔
		 위 4개 외 나머지 것들은 상위에 위치한 annotation-driven에서 스캔
	 -->
	<context:component-scan base-package="com.company.temp" />
	
	<!-- For @Aspect @Pointcut @Before -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- TransactionManager bean 등록 -->
	<beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	<!-- @Transactional 어노테이션 처리 -->
	<!-- <tx:annotation-driven transaction-manager="txManager" /> -->

	<!-- TransactionManager 적용범위 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- get으로 시작하는 모든 메서드에 대해서 insert 적용 -->
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="insert*" no-rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!-- TransactionManager AOP 설정 -->
	<aop:config>
		<aop:pointcut id="trPointcut"
			expression="execution(* com.company..*Impl.*(..))" />
		<aop:advisor pointcut-ref="trPointcut"
			advice-ref="txAdvice" />
	</aop:config>
	
		
</beans:beans>
